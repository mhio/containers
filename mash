#!/usr/bin/env bash
set -ueo pipefail
dateTime(){ date -u '+%Y-%m-%dT%H:%M:%SZ'; }
rundir=$(cd -P -- "$(dirname -- "$0")" && printf '%s\n' "$(pwd -P)")
cd "$rundir"


# {make.sh user}

IMAGE_REPO="me"

DENO_VERSION="1.29.4"
NTFY_VERSION="1.29.1"
NUSHELL_VERSION="0.71.0"

run:build (){
  run:build:debian-base "$@"    
  run:build:debian-interactive "$@"
  run:build:debian-nix "$@"
  run:build:debian-zsh "$@"
  run:build:debian-deno "$@"
  run:build:debian-node "$@"
  run:build:debian-ntfy "$@"
  run:build:debian-nushell "$@"
}

run:build:debian-base(){
  docker pull gcr.io/distroless/cc-debian11:latest
  docker pull docker.io/debian:11
  cd "$rundir"/debian-base
  docker build -t "${IMAGE_REPO}/debian-base:11" -t "${IMAGE_REPO}/debian-base:latest" -t "${IMAGE_REPO}/debian:latest" -t "mdeb" . "$@"    
}

run:build:debian-interactive(){
  cd "$rundir"/debian-interactive
  docker build -t "${IMAGE_REPO}/debian-interactive:11" -t "${IMAGE_REPO}/debian-interactive:latest" -t "mdebi" .
}
run:build:debian-nix () {
  cd "$rundir"/debian-nix
  docker build -t "${IMAGE_REPO}/debian-nix:11" -t "${IMAGE_REPO}/debian-nix:latest" -t "mdebnix" .
}
run:build:debian-zsh () {
  cd "$rundir"/debian-zsh
  docker build -t "${IMAGE_REPO}/debian-zsh:11" -t "${IMAGE_REPO}/debian-zsh:latest" -t "mdebz" .
}
run:build:debian-deno () {
  cd "$rundir"/debian-deno
  docker build \
   --build-arg "DENO_VERSION=${DENO_VERSION}" \
   --tag "${IMAGE_REPO}/debian-deno:11" \
   --tag "${IMAGE_REPO}/debian-deno:latest" \
   --tag "mdebd" \
   .
}
run:build:debian-node () {
  cd "$rundir"/debian-node
  # set --build-arg NODE_VERSION="18.x.x"
  docker build -t "${IMAGE_REPO}/debian-node:18" -t "${IMAGE_REPO}/debian-node:latest" -t "mdebn" .
  docker run --rm "${IMAGE_REPO}/debian-node:18" -e 'console.log(JSON.stringify({yay:"ok"})); process.exit(0)'
}
run:build:debian-ntfy () {
  cd "$rundir"/debian-ntfy
  docker build -t "${IMAGE_REPO}/ntfy:${NTFY_VERSION}" --build-arg "NTFY_VERSION=${NTFY_VERSION}" . "$@"
}
run:build:debian-nushell () {
  cd "$rundir"/debian-nushell
  docker build -t "${IMAGE_REPO}/nushell:${NTFY_VERSION}" --build-arg "NUSHELL_VERSION=${NUSHELL_VERSION}" . "$@"
}
run:run:debian-base(){
  local type_name="$1"
  shift
  docker run --interactive --tty --rm "${IMAGE_REPO}/debian-${type_name}:latest" "$@"
}

run:debian(){
  run:run:debian-base interactive "$@"
}

run:nix(){
  run:run:debian-base nix "$@"
}

run:zsh(){
  run:run:debian-base zsh "$@"
}

run:deno(){
  run:run:debian-base deno "$@"
}

run:docker () {
  docker run \
   --interactive --tty \
   --env DEBUG=true \
   --rm \
   --name "${CONTAINER_NAME}" \
   "${IMAGE_REPO}:${IMAGE_TAG}" \
   "$@"
}

run:check:from(){
  grep FROM */Dockerfile
}


# {make.sh common}
run:completion:words(){
  declare -F | awk '/^declare -f run:/ { if (/run:completion:/) { next; }; printf("%s\n", substr($0,16)); }'
}
run:help(){
  set +x
  echo "Commands:"
  run:completion:words | awk '{ printf("  %s\n", $0); }'
  exit 1
}
[ -z "${1:-}" ] && run:help
cmd=$1
shift
[[ "$cmd" == completion:* ]] || set -x
run:"$cmd" "$@"

