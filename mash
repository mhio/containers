#!/usr/bin/env bash
set -ueo pipefail
dateTime(){ date -u '+%Y-%m-%dT%H:%M:%SZ'; }
rundir=$(cd -P -- "$(dirname -- "$0")" && printf '%s\n' "$(pwd -P)")
cd "$rundir"


# {make.sh user}

# can be a `host/me`
IMAGE_REPO="me"
NODE_VERSION="18.17.1"
DENO_VERSION="1.36.4"
NTFY_VERSION="2.7.0"
NUSHELL_VERSION="0.84.0"
NIX_VERSION="2.17.0"
NIX_VERSION_SHA="1596ed46efae091388ed6db626c31f14fc1b703e5a552b00a9e68419edb8172d"

removeLeadingV(){
  printf "%s\n" "${1##v}"
}
removeLeadingVs(){
  while read -r line; do
    removeLeadingV "$line"
  done
}
run:getReleases(){
  set +x
  node_all="$(curl -sfS 'https://nodejs.org/download/release/index.tab')"
  node_18="$(echo "$node_all" | grep '^v18' | head -1 | awk '{ print $1 }' | removeLeadingVs)"
  format="%12s: %8s - %s \n"
  printf "$format" "node v18" "$node_18" "$NODE_VERSION"
  deno_latest="$(curl -sfS 'https://api.github.com/repos/denoland/deno/releases?per_page=1' | jq -r '.[0].name' | removeLeadingVs)"
  printf "$format" "deno" "$deno_latest" "$DENO_VERSION"
  ntfy_latest="$(curl -sfS 'https://api.github.com/repos/binwiederhier/ntfy/releases?per_page=1' | jq -r '.[0].name' | removeLeadingVs)"
  printf "$format" "ntfy" "$ntfy_latest" "$NTFY_VERSION"
  nushell_latest="$(curl -sfS 'https://api.github.com/repos/nushell/nushell/releases?per_page=1' | jq -r '.[0].name')"
  printf "$format" "nushell" "$nushell_latest" "$NUSHELL_VERSION"
  nix_latest="$(curl -sfS 'https://nix-releases.s3.amazonaws.com/?delimiter=/&prefix=nix/' \
    | xpath -q -e '//ListBucketResult/CommonPrefixes/Prefix/text()' \
    | sort --version-sort \
    | tail -1)"
  nix_latest_version_only="$(echo "$nix_latest" | perl -pe 's!nix/nix-(\d+\.\d+\.\d+)/!$1!')"
  printf "$format" "nix" "$nix_latest_version_only" "$NIX_VERSION"
  if [ "$node_18" != "$NODE_VERSION" ] \
     || [ "$deno_latest" != "$DENO_VERSION" ] \
     || [ "$ntfy_latest" != "$NTFY_VERSION" ] \
     || [ "$nushell_latest" != "$NUSHELL_VERSION" ] \
     || [ "$nix_latest_version_only" != "$NIX_VERSION" ]
  then
    printf '\n'
    printf '%s="%s"\n' "NODE_VERSION" "$(removeLeadingV "$node_18")"
    printf '%s="%s"\n' "DENO_VERSION" "$deno_latest"
    printf '%s="%s"\n' "NTFY_VERSION" "$ntfy_latest"
    printf '%s="%s"\n' "NUSHELL_VERSION" "$nushell_latest"
    printf '%s="%s"\n' "NIX_VERSION" "$nix_latest_version_only"
  fi 
}

r(){
  printf "runcmd: %s" "$1" 1>&2
  printf " '%s'" "${@:2}" 1>&2
  printf "\n" 1>&2
  "$@"
  rc=$?
  printf "rancmd: [%s] %s" "$rc" "$1" 1>&2
  printf " '%s'" "${@:2}" 1>&2
  printf "\n" 1>&2
}
r echo test "quotes" "spaced quotes" 'singlequote'


run:getReleasesLink(){
  url='https://api.github.com/repos/denoland/deno/releases?per_page=1'
  set +x
  res=$(curl -sfS "$url")
  echo "$res" \
    | jq '
      .[0] 
      | [ 
          .name, 
          (.assets[] | select( (.name|test("x86_64")) and (.name|test("linux")) ) | .browser_download_url )
        ]'
  rc=$?; [ "$rc" != "0" ] && echo "ERROR: $res" && return "$rc"
}

run:build (){
  run:build:debian-base "$@"    
  run:build:debian-interactive "$@" --pull=false
  run:build:debian-deno "$@"  --pull=false
  run:build:debian-node "$@"  --pull=false
  run:build:debian-ntfy "$@"  --pull=false
  run:build:debian-nushell "$@"  --pull=false
  run:build:debian-nix "$@"  --pull=false
  run:build:debian-zsh "$@"  --pull=false
}

run:build:debian-base(){
  docker pull gcr.io/distroless/cc-debian12:latest
  docker pull docker.io/debian:12-slim
  cd "$rundir"/debian-base
  docker build -t "${IMAGE_REPO}/debian-base:12" -t "${IMAGE_REPO}/debian-base:latest" -t "${IMAGE_REPO}/debian:latest" -t "mdeb" . "$@"    
}

run:build:debian-interactive(){
  cd "$rundir"/debian-interactive
  docker build -t "${IMAGE_REPO}/debian-interactive:12" -t "${IMAGE_REPO}/debian-interactive:latest" -t "debi" .
}
run:build:debian-nix () {
  cd "$rundir"/debian-nix
  docker build \
   --build-arg "NIX_VERSION=${NIX_VERSION}"\
   --build-arg "NIX_VERSION_SHA=${NIX_VERSION_SHA}"\
   --tag "${IMAGE_REPO}/debian-nix:12" \
   --tag "${IMAGE_REPO}/debian-nix:latest" \
   .
}
run:build:debian-zsh () {
  cd "$rundir"/debian-zsh
  docker build -t "${IMAGE_REPO}/debian-zsh:12" -t "${IMAGE_REPO}/debian-zsh:latest" .
}
run:build:debian-deno () {
  cd "$rundir"/debian-deno
  docker build \
   --build-arg "DENO_VERSION=${DENO_VERSION}" \
   --tag "${IMAGE_REPO}/debian-deno:11" \
   --tag "${IMAGE_REPO}/debian-deno:latest" \
   .
}
run:build:debian-node () {
  cd "$rundir"/debian-node
  docker build \
   --build-arg NODE_VERSION="${NODE_VERSION}" \
   --tag "${IMAGE_REPO}/debian-node:18" \
   --tag "${IMAGE_REPO}/debian-node:latest" \
   .
  #docker run --rm "${IMAGE_REPO}/debian-node:18" -e 'console.log(JSON.stringify({yay:"ok"})); process.exit(0)'
}
run:build:debian-ntfy () {
  cd "$rundir"/debian-ntfy
  docker build -t "${IMAGE_REPO}/ntfy:${NTFY_VERSION}" --build-arg "NTFY_VERSION=${NTFY_VERSION}" . "$@"
}
run:build:debian-nushell () {
  cd "$rundir"/debian-nushell
  docker build -t "${IMAGE_REPO}/nushell:${NUSHELL_VERSION}" --build-arg "NUSHELL_VERSION=${NUSHELL_VERSION}" . "$@"
}
run:run:debian-base(){
  local type_name="$1"
  shift
  docker run --interactive --tty --rm "${IMAGE_REPO}/debian-${type_name}:latest" "$@"
}

run:debian(){
  run:run:debian-base interactive "$@"
}

run:nix(){
  run:run:debian-base nix "$@"
}

run:zsh(){
  run:run:debian-base zsh "$@"
}

run:deno(){
  run:run:debian-base deno "$@"
}

run:docker () {
  docker run \
   --interactive --tty \
   --env DEBUG=true \
   --rm \
   --name "${CONTAINER_NAME}" \
   "${IMAGE_REPO}:${IMAGE_TAG}" \
   "$@"
}

run:check:from(){
  grep FROM ./*/Dockerfile
}


# {make.sh common}
run:completion:words(){
  declare -F | awk '/^declare -f run:/ { if (/run:completion:/) { next; }; printf("%s\n", substr($0,16)); }'
}
run:help(){
  set +x
  echo "Commands:"
  run:completion:words | awk '{ printf("  %s\n", $0); }'
  exit 1
}
[ -z "${1:-}" ] && run:help
cmd=$1
shift
[[ "$cmd" == completion:* ]] || set -x
run:"$cmd" "$@"

